// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.31.1
// source: kurushimi/models.proto

package matchmaker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueuedPlayer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of type UUID (minecraft player id)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ticket_id of type ObjectID, the ID of the ticket that the player belongs to
	TicketId      string  `protobuf:"bytes,2,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	MapId         *string `protobuf:"bytes,3,opt,name=map_id,json=mapId,proto3,oneof" json:"map_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuedPlayer) Reset() {
	*x = QueuedPlayer{}
	mi := &file_kurushimi_models_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuedPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedPlayer) ProtoMessage() {}

func (x *QueuedPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedPlayer.ProtoReflect.Descriptor instead.
func (*QueuedPlayer) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{0}
}

func (x *QueuedPlayer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueuedPlayer) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *QueuedPlayer) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

type Ticket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// party_id of type ObjectID (mongo id)
	// Whilst technically optional, it is very rare. The party_id is only null on join lobby selection
	// as the player does not yet have a party.
	PartyId   *string                `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3,oneof" json:"party_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// player_ids of type UUID (minecraft player id)
	PlayerIds  []string `protobuf:"bytes,4,rep,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	GameModeId string   `protobuf:"bytes,5,opt,name=game_mode_id,json=gameModeId,proto3" json:"game_mode_id,omitempty"`
	// auto_teleport if true, the proxy will listen for match messages and teleport the player to the match.
	// if false, the proxy will not auto-teleport the player and you should listen for match messages yourself.
	//
	// e.g. this is used by the proxy for lobby matchmaking as it is handled differently
	// to when the player is already connected to the server.
	//
	// NOTE: This field is optional in the request, but not optional afterwards and is resolved to true/false from the optional.
	AutoTeleport bool `protobuf:"varint,6,opt,name=auto_teleport,json=autoTeleport,proto3" json:"auto_teleport,omitempty"`
	// dequeue_on_disconnect: is determined by the party settings. True if the player is not in a party, or if the party
	// is not set to stay in queue on disconnect.
	// NOTE: The ticket will be deleted anyway if the party is deleted.
	DequeueOnDisconnect bool `protobuf:"varint,7,opt,name=dequeue_on_disconnect,json=dequeueOnDisconnect,proto3" json:"dequeue_on_disconnect,omitempty"`
	InPendingMatch      bool `protobuf:"varint,8,opt,name=in_pending_match,json=inPendingMatch,proto3" json:"in_pending_match,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_kurushimi_models_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{1}
}

func (x *Ticket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ticket) GetPartyId() string {
	if x != nil && x.PartyId != nil {
		return *x.PartyId
	}
	return ""
}

func (x *Ticket) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *Ticket) GetGameModeId() string {
	if x != nil {
		return x.GameModeId
	}
	return ""
}

func (x *Ticket) GetAutoTeleport() bool {
	if x != nil {
		return x.AutoTeleport
	}
	return false
}

func (x *Ticket) GetDequeueOnDisconnect() bool {
	if x != nil {
		return x.DequeueOnDisconnect
	}
	return false
}

func (x *Ticket) GetInPendingMatch() bool {
	if x != nil {
		return x.InPendingMatch
	}
	return false
}

type Match struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GameModeId string                 `protobuf:"bytes,2,opt,name=game_mode_id,json=gameModeId,proto3" json:"game_mode_id,omitempty"`
	// map_id selected by the matchmaker based on the game mode config
	// Only present if the game mode has a map pool.
	// Clients should still always account for it being null for testing purposes (random map when in game dev mode)
	MapId *string `protobuf:"bytes,3,opt,name=map_id,json=mapId,proto3,oneof" json:"map_id,omitempty"`
	// tickets is a source of truth for all the grouped players in the match.
	Tickets       []*Ticket   `protobuf:"bytes,4,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Assignment    *Assignment `protobuf:"bytes,5,opt,name=assignment,proto3,oneof" json:"assignment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_kurushimi_models_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{2}
}

func (x *Match) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Match) GetGameModeId() string {
	if x != nil {
		return x.GameModeId
	}
	return ""
}

func (x *Match) GetMapId() string {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return ""
}

func (x *Match) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Match) GetAssignment() *Assignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

type Assignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerAddress string                 `protobuf:"bytes,2,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	ServerPort    uint32                 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	// protocol_version e.g. 754
	// Not present for proxies
	ProtocolVersion *int64 `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion,proto3,oneof" json:"protocol_version,omitempty"`
	// version_name e.g. 1.19.4
	// Not present for proxies
	VersionName   *string `protobuf:"bytes,5,opt,name=version_name,json=versionName,proto3,oneof" json:"version_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	mi := &file_kurushimi_models_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{3}
}

func (x *Assignment) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *Assignment) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *Assignment) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *Assignment) GetProtocolVersion() int64 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *Assignment) GetVersionName() string {
	if x != nil && x.VersionName != nil {
		return *x.VersionName
	}
	return ""
}

type PendingMatch struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GameModeId string                 `protobuf:"bytes,2,opt,name=game_mode_id,json=gameModeId,proto3" json:"game_mode_id,omitempty"`
	// ticket_ids of type ObjectID (mongo id)
	TicketIds    []string               `protobuf:"bytes,3,rep,name=ticket_ids,json=ticketIds,proto3" json:"ticket_ids,omitempty"`
	TeleportTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=teleport_time,json=teleportTime,proto3" json:"teleport_time,omitempty"`
	// player_count is the number of players in the tickets of the PendingMatch.
	// This is updated each time the matchfunction is run.
	PlayerCount   int64 `protobuf:"varint,5,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PendingMatch) Reset() {
	*x = PendingMatch{}
	mi := &file_kurushimi_models_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PendingMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingMatch) ProtoMessage() {}

func (x *PendingMatch) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingMatch.ProtoReflect.Descriptor instead.
func (*PendingMatch) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{4}
}

func (x *PendingMatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PendingMatch) GetGameModeId() string {
	if x != nil {
		return x.GameModeId
	}
	return ""
}

func (x *PendingMatch) GetTicketIds() []string {
	if x != nil {
		return x.TicketIds
	}
	return nil
}

func (x *PendingMatch) GetTeleportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TeleportTime
	}
	return nil
}

func (x *PendingMatch) GetPlayerCount() int64 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

type AllocationData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *Match                 `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllocationData) Reset() {
	*x = AllocationData{}
	mi := &file_kurushimi_models_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationData) ProtoMessage() {}

func (x *AllocationData) ProtoReflect() protoreflect.Message {
	mi := &file_kurushimi_models_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationData.ProtoReflect.Descriptor instead.
func (*AllocationData) Descriptor() ([]byte, []int) {
	return file_kurushimi_models_proto_rawDescGZIP(), []int{5}
}

func (x *AllocationData) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

var File_kurushimi_models_proto protoreflect.FileDescriptor

const file_kurushimi_models_proto_rawDesc = "" +
	"\n" +
	"\x16kurushimi/models.proto\x12\x17emortal.kurushimi.model\x1a\x1fgoogle/protobuf/timestamp.proto\"b\n" +
	"\fQueuedPlayer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tticket_id\x18\x02 \x01(\tR\bticketId\x12\x1a\n" +
	"\x06map_id\x18\x03 \x01(\tH\x00R\x05mapId\x88\x01\x01B\t\n" +
	"\a_map_id\"\xc4\x02\n" +
	"\x06Ticket\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1e\n" +
	"\bparty_id\x18\x02 \x01(\tH\x00R\apartyId\x88\x01\x01\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"player_ids\x18\x04 \x03(\tR\tplayerIds\x12 \n" +
	"\fgame_mode_id\x18\x05 \x01(\tR\n" +
	"gameModeId\x12#\n" +
	"\rauto_teleport\x18\x06 \x01(\bR\fautoTeleport\x122\n" +
	"\x15dequeue_on_disconnect\x18\a \x01(\bR\x13dequeueOnDisconnect\x12(\n" +
	"\x10in_pending_match\x18\b \x01(\bR\x0einPendingMatchB\v\n" +
	"\t_party_id\"\xf4\x01\n" +
	"\x05Match\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\fgame_mode_id\x18\x02 \x01(\tR\n" +
	"gameModeId\x12\x1a\n" +
	"\x06map_id\x18\x03 \x01(\tH\x00R\x05mapId\x88\x01\x01\x129\n" +
	"\atickets\x18\x04 \x03(\v2\x1f.emortal.kurushimi.model.TicketR\atickets\x12H\n" +
	"\n" +
	"assignment\x18\x05 \x01(\v2#.emortal.kurushimi.model.AssignmentH\x01R\n" +
	"assignment\x88\x01\x01B\t\n" +
	"\a_map_idB\r\n" +
	"\v_assignment\"\xef\x01\n" +
	"\n" +
	"Assignment\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12%\n" +
	"\x0eserver_address\x18\x02 \x01(\tR\rserverAddress\x12\x1f\n" +
	"\vserver_port\x18\x03 \x01(\rR\n" +
	"serverPort\x12.\n" +
	"\x10protocol_version\x18\x04 \x01(\x03H\x00R\x0fprotocolVersion\x88\x01\x01\x12&\n" +
	"\fversion_name\x18\x05 \x01(\tH\x01R\vversionName\x88\x01\x01B\x13\n" +
	"\x11_protocol_versionB\x0f\n" +
	"\r_version_name\"\xc3\x01\n" +
	"\fPendingMatch\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12 \n" +
	"\fgame_mode_id\x18\x02 \x01(\tR\n" +
	"gameModeId\x12\x1d\n" +
	"\n" +
	"ticket_ids\x18\x03 \x03(\tR\tticketIds\x12?\n" +
	"\rteleport_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fteleportTime\x12!\n" +
	"\fplayer_count\x18\x05 \x01(\x03R\vplayerCount\"F\n" +
	"\x0eAllocationData\x124\n" +
	"\x05match\x18\x01 \x01(\v2\x1e.emortal.kurushimi.model.MatchR\x05matchB^\n" +
	" dev.emortal.api.model.matchmakerP\x01Z8github.com/emortalmc/proto-specs/gen/go/model/matchmakerb\x06proto3"

var (
	file_kurushimi_models_proto_rawDescOnce sync.Once
	file_kurushimi_models_proto_rawDescData []byte
)

func file_kurushimi_models_proto_rawDescGZIP() []byte {
	file_kurushimi_models_proto_rawDescOnce.Do(func() {
		file_kurushimi_models_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kurushimi_models_proto_rawDesc), len(file_kurushimi_models_proto_rawDesc)))
	})
	return file_kurushimi_models_proto_rawDescData
}

var file_kurushimi_models_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_kurushimi_models_proto_goTypes = []any{
	(*QueuedPlayer)(nil),          // 0: emortal.kurushimi.model.QueuedPlayer
	(*Ticket)(nil),                // 1: emortal.kurushimi.model.Ticket
	(*Match)(nil),                 // 2: emortal.kurushimi.model.Match
	(*Assignment)(nil),            // 3: emortal.kurushimi.model.Assignment
	(*PendingMatch)(nil),          // 4: emortal.kurushimi.model.PendingMatch
	(*AllocationData)(nil),        // 5: emortal.kurushimi.model.AllocationData
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_kurushimi_models_proto_depIdxs = []int32{
	6, // 0: emortal.kurushimi.model.Ticket.created_at:type_name -> google.protobuf.Timestamp
	1, // 1: emortal.kurushimi.model.Match.tickets:type_name -> emortal.kurushimi.model.Ticket
	3, // 2: emortal.kurushimi.model.Match.assignment:type_name -> emortal.kurushimi.model.Assignment
	6, // 3: emortal.kurushimi.model.PendingMatch.teleport_time:type_name -> google.protobuf.Timestamp
	2, // 4: emortal.kurushimi.model.AllocationData.match:type_name -> emortal.kurushimi.model.Match
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_kurushimi_models_proto_init() }
func file_kurushimi_models_proto_init() {
	if File_kurushimi_models_proto != nil {
		return
	}
	file_kurushimi_models_proto_msgTypes[0].OneofWrappers = []any{}
	file_kurushimi_models_proto_msgTypes[1].OneofWrappers = []any{}
	file_kurushimi_models_proto_msgTypes[2].OneofWrappers = []any{}
	file_kurushimi_models_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kurushimi_models_proto_rawDesc), len(file_kurushimi_models_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kurushimi_models_proto_goTypes,
		DependencyIndexes: file_kurushimi_models_proto_depIdxs,
		MessageInfos:      file_kurushimi_models_proto_msgTypes,
	}.Build()
	File_kurushimi_models_proto = out.File
	file_kurushimi_models_proto_goTypes = nil
	file_kurushimi_models_proto_depIdxs = nil
}

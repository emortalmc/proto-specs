// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: kurushimi/grpc.proto

package matchmaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaker_QueueByPlayer_FullMethodName       = "/emortal.kurushimi.grpc.Matchmaker/QueueByPlayer"
	Matchmaker_SendPlayersToLobby_FullMethodName  = "/emortal.kurushimi.grpc.Matchmaker/SendPlayersToLobby"
	Matchmaker_LoginQueueByPlayer_FullMethodName  = "/emortal.kurushimi.grpc.Matchmaker/LoginQueueByPlayer"
	Matchmaker_DequeueByPlayer_FullMethodName     = "/emortal.kurushimi.grpc.Matchmaker/DequeueByPlayer"
	Matchmaker_ChangePlayerMapVote_FullMethodName = "/emortal.kurushimi.grpc.Matchmaker/ChangePlayerMapVote"
	Matchmaker_GetPlayerQueueInfo_FullMethodName  = "/emortal.kurushimi.grpc.Matchmaker/GetPlayerQueueInfo"
)

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakerClient interface {
	QueueByPlayer(ctx context.Context, in *QueueByPlayerRequest, opts ...grpc.CallOption) (*QueueByPlayerResponse, error)
	// SendPlayerToLobby is used to send a player to a lobby match after they've already joined the server.
	// This is used alternatively to QueueByPlayer as lobby must be handled differently
	// e.g. you must be able to go to the lobby when in queue for another game mode.
	SendPlayersToLobby(ctx context.Context, in *SendPlayerToLobbyRequest, opts ...grpc.CallOption) (*SendPlayerToLobbyResponse, error)
	// QueueInitialLobbyByPlayer is used to queue a player for a proxy/lobby match before they've technically joined the server.
	// This is used by the edge and proxy as the player doesn't yet have a party.
	// Note this method does much less validation and error handling than QueueByPlayer due to its intended use case.
	// This method will create a ticket with auto_teleport as false and default to the 'lobby' game mode.
	LoginQueueByPlayer(ctx context.Context, in *LoginQueueByPlayerRequest, opts ...grpc.CallOption) (*LoginQueueByPlayerResponse, error)
	DequeueByPlayer(ctx context.Context, in *DequeueByPlayerRequest, opts ...grpc.CallOption) (*DequeueByPlayerResponse, error)
	ChangePlayerMapVote(ctx context.Context, in *ChangePlayerMapVoteRequest, opts ...grpc.CallOption) (*ChangePlayerMapVoteResponse, error)
	GetPlayerQueueInfo(ctx context.Context, in *GetPlayerQueueInfoRequest, opts ...grpc.CallOption) (*GetPlayerQueueInfoResponse, error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) QueueByPlayer(ctx context.Context, in *QueueByPlayerRequest, opts ...grpc.CallOption) (*QueueByPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueByPlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaker_QueueByPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) SendPlayersToLobby(ctx context.Context, in *SendPlayerToLobbyRequest, opts ...grpc.CallOption) (*SendPlayerToLobbyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPlayerToLobbyResponse)
	err := c.cc.Invoke(ctx, Matchmaker_SendPlayersToLobby_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) LoginQueueByPlayer(ctx context.Context, in *LoginQueueByPlayerRequest, opts ...grpc.CallOption) (*LoginQueueByPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginQueueByPlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaker_LoginQueueByPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) DequeueByPlayer(ctx context.Context, in *DequeueByPlayerRequest, opts ...grpc.CallOption) (*DequeueByPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DequeueByPlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaker_DequeueByPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) ChangePlayerMapVote(ctx context.Context, in *ChangePlayerMapVoteRequest, opts ...grpc.CallOption) (*ChangePlayerMapVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePlayerMapVoteResponse)
	err := c.cc.Invoke(ctx, Matchmaker_ChangePlayerMapVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) GetPlayerQueueInfo(ctx context.Context, in *GetPlayerQueueInfoRequest, opts ...grpc.CallOption) (*GetPlayerQueueInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerQueueInfoResponse)
	err := c.cc.Invoke(ctx, Matchmaker_GetPlayerQueueInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
// All implementations must embed UnimplementedMatchmakerServer
// for forward compatibility.
type MatchmakerServer interface {
	QueueByPlayer(context.Context, *QueueByPlayerRequest) (*QueueByPlayerResponse, error)
	// SendPlayerToLobby is used to send a player to a lobby match after they've already joined the server.
	// This is used alternatively to QueueByPlayer as lobby must be handled differently
	// e.g. you must be able to go to the lobby when in queue for another game mode.
	SendPlayersToLobby(context.Context, *SendPlayerToLobbyRequest) (*SendPlayerToLobbyResponse, error)
	// QueueInitialLobbyByPlayer is used to queue a player for a proxy/lobby match before they've technically joined the server.
	// This is used by the edge and proxy as the player doesn't yet have a party.
	// Note this method does much less validation and error handling than QueueByPlayer due to its intended use case.
	// This method will create a ticket with auto_teleport as false and default to the 'lobby' game mode.
	LoginQueueByPlayer(context.Context, *LoginQueueByPlayerRequest) (*LoginQueueByPlayerResponse, error)
	DequeueByPlayer(context.Context, *DequeueByPlayerRequest) (*DequeueByPlayerResponse, error)
	ChangePlayerMapVote(context.Context, *ChangePlayerMapVoteRequest) (*ChangePlayerMapVoteResponse, error)
	GetPlayerQueueInfo(context.Context, *GetPlayerQueueInfoRequest) (*GetPlayerQueueInfoResponse, error)
	mustEmbedUnimplementedMatchmakerServer()
}

// UnimplementedMatchmakerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServer struct{}

func (UnimplementedMatchmakerServer) QueueByPlayer(context.Context, *QueueByPlayerRequest) (*QueueByPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueByPlayer not implemented")
}
func (UnimplementedMatchmakerServer) SendPlayersToLobby(context.Context, *SendPlayerToLobbyRequest) (*SendPlayerToLobbyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPlayersToLobby not implemented")
}
func (UnimplementedMatchmakerServer) LoginQueueByPlayer(context.Context, *LoginQueueByPlayerRequest) (*LoginQueueByPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginQueueByPlayer not implemented")
}
func (UnimplementedMatchmakerServer) DequeueByPlayer(context.Context, *DequeueByPlayerRequest) (*DequeueByPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DequeueByPlayer not implemented")
}
func (UnimplementedMatchmakerServer) ChangePlayerMapVote(context.Context, *ChangePlayerMapVoteRequest) (*ChangePlayerMapVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePlayerMapVote not implemented")
}
func (UnimplementedMatchmakerServer) GetPlayerQueueInfo(context.Context, *GetPlayerQueueInfoRequest) (*GetPlayerQueueInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerQueueInfo not implemented")
}
func (UnimplementedMatchmakerServer) mustEmbedUnimplementedMatchmakerServer() {}
func (UnimplementedMatchmakerServer) testEmbeddedByValue()                    {}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_QueueByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).QueueByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_QueueByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).QueueByPlayer(ctx, req.(*QueueByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_SendPlayersToLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPlayerToLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).SendPlayersToLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_SendPlayersToLobby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).SendPlayersToLobby(ctx, req.(*SendPlayerToLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_LoginQueueByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginQueueByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).LoginQueueByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_LoginQueueByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).LoginQueueByPlayer(ctx, req.(*LoginQueueByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_DequeueByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).DequeueByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_DequeueByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).DequeueByPlayer(ctx, req.(*DequeueByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_ChangePlayerMapVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePlayerMapVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).ChangePlayerMapVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_ChangePlayerMapVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).ChangePlayerMapVote(ctx, req.(*ChangePlayerMapVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_GetPlayerQueueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerQueueInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).GetPlayerQueueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaker_GetPlayerQueueInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).GetPlayerQueueInfo(ctx, req.(*GetPlayerQueueInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emortal.kurushimi.grpc.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueByPlayer",
			Handler:    _Matchmaker_QueueByPlayer_Handler,
		},
		{
			MethodName: "SendPlayersToLobby",
			Handler:    _Matchmaker_SendPlayersToLobby_Handler,
		},
		{
			MethodName: "LoginQueueByPlayer",
			Handler:    _Matchmaker_LoginQueueByPlayer_Handler,
		},
		{
			MethodName: "DequeueByPlayer",
			Handler:    _Matchmaker_DequeueByPlayer_Handler,
		},
		{
			MethodName: "ChangePlayerMapVote",
			Handler:    _Matchmaker_ChangePlayerMapVote_Handler,
		},
		{
			MethodName: "GetPlayerQueueInfo",
			Handler:    _Matchmaker_GetPlayerQueueInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kurushimi/grpc.proto",
}
